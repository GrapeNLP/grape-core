/*
 * GRAPENLP
 *
 * Copyright (C) 2004-2008 Université de Marne-la-Vallée <javier.sastre@univ-mlv.fr>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
 *
 */

/*
 *  @author Javier Sastre
 */

package com.grapenlp;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.TreeSet;

public class LowercaseTableHeaderWriter implements WriterConstants
{
    public void write(TreeSet<CaseFoldingEntry> caseFoldingEntries, File lowercaseTableHeaderFile, boolean verbose) throws IOException {
        boolean[] caseTable = new boolean[MAX_LETTERS];
        int i;
        for (i = 0; i < MAX_LETTERS; ++i)
            caseTable[i] = false;

        for (CaseFoldingEntry entry: caseFoldingEntries)
            caseTable[entry.getLowerCaseCode()] = true;

        try (BufferedWriter output = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(lowercaseTableHeaderFile), StandardCharsets.UTF_8)))
        {
            output.write(license);
            output.write('\n');
            output.write(autogenerated);
            output.write('\n');
            output.write("#ifndef GRAPENLP_U_LOWERCASE_TABLE_H\n");
            output.write("#define GRAPENLP_U_LOWERCASE_TABLE_H\n");
            output.write("\n");
            output.write("#include <bitset>\n");
            output.write("#include <string>\n");
            output.write("#include <grapenlp/unichar.h>\n");
            output.write("\n");
            output.write("namespace grapenlp\n");
            output.write("{\n");
            output.write("\tconst std::bitset<" + MAX_LETTERS + "> lowercase_table = std::bitset<" + MAX_LETTERS + ">(std::string(\"");

            if (verbose)
            {
                System.out.println("Lowercase letters:\n");
                for (i = 0; i < MAX_LETTERS; ++i)
                    if (caseTable[i])
                        System.out.println(Integer.toString(i, 16) + ": " + (char)i);
            }

            for (i = MAX_LETTERS - 1; i >= 0; --i)
            {
                if (caseTable[i])
                    output.write('1');
                else
                    output.write('0');
            }
            output.write("\"));\n");
            output.write("} //namespace grapenlp\n");
            output.write("\n");
            output.write("#endif //GRAPENLP_U_LOWERCASE_TABLE_H\n");
        }
    }
}
