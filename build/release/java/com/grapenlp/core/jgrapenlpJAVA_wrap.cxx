/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <grapenlp/assoc_container_impl_choice.h>


#include <grapenlp/rtno_type.h>


#include <grapenlp/parser.h>


#include <grapenlp/unichar.h>


#include <grapenlp/array.h>


static unsigned char *new_byte_array(int nelements) { 
  return new unsigned char[nelements](); 
}

static void delete_byte_array(unsigned char *ary) { 
  delete [] ary; 
}

static unsigned char byte_array_getitem(unsigned char *ary, int index) {
    return ary[index];
}
static void byte_array_setitem(unsigned char *ary, int index, unsigned char value) {
    ary[index] = value;
}


#include <grapenlp/u_array.h>

SWIGINTERN unsigned short const &grapenlp_array_Sl_unichar_Sg__get_elem_at(grapenlp::array< unichar > const *self,grapenlp::array< unsigned short >::size_type i){ return (*self)[i]; }

#include <grapenlp/trie.h>
namespace grapenlp
{
    template<typename T>
    using trie_string = typename ::grapenlp::trie<T>::string;

    template<typename T>
    using trie_const_iterator = typename ::grapenlp::trie<T>::const_iterator;
}


namespace grapenlp
{
    typedef trie_string<unichar> u_trie_string;
    typedef trie<unichar> u_trie;
}


namespace grapenlp
{
    template<typename T, typename Data>
    using trie_with_data_string = typename ::grapenlp::trie_with_data<T, Data>::string;

    template<typename T, typename Data>
    using trie_with_data_const_iterator = typename ::grapenlp::trie_with_data<T, Data>::const_iterator;
}


namespace grapenlp
{
    template<typename T, typename Data>
    using trie_with_ptr_data_string = typename ::grapenlp::trie_with_ptr_data<T, Data>::string;

    template<typename T, typename Data>
    using trie_with_ptr_data_const_iterator = typename ::grapenlp::trie_with_ptr_data<T, Data>::const_iterator;
}


#include <grapenlp/out_bound.h>


#include <grapenlp/u_out_bound.h>

namespace grapenlp
{
    typedef trie_with_data_string<unichar, out_bound_const_ref_triplet<unichar> *> base_u_out_bound_name_string;
    typedef trie_with_data<unichar, out_bound_const_ref_triplet<unichar> *> base_u_out_bound_trie;
    typedef trie_with_ptr_data_string<unichar, ::grapenlp::out_bound_const_ref_triplet<unichar> > u_out_bound_name_string;
    typedef trie_with_ptr_data<unichar, out_bound_const_ref_triplet<unichar> > u_out_bound_trie;
}


#include <grapenlp/simple_segment.h>

namespace grapenlp
{
    typedef ::grapenlp::simple_segment<::grapenlp::array<unichar>::const_iterator, unichar> uau_simple_segment;
    typedef ::grapenlp::array<::grapenlp::simple_segment<::grapenlp::array<unichar>::const_iterator, unichar> > uau_simple_segment_array;
}

SWIGINTERN ::grapenlp::simple_segment< unsigned short const *,unsigned short > const &grapenlp_array_Sl__grapenlp_simple_segment_Sl__grapenlp_array_Sl_unichar_Sg__const_iterator_Sc_unichar_Sg__Sg__get_elem_at(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *self,grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type i){ return (*self)[i]; }

#include <grapenlp/simple_segment_array_x_weight.h>

namespace grapenlp
{
    typedef ::grapenlp::simple_segment_array_x_weight<::grapenlp::array<unichar>::const_iterator, unichar, int> uaui_simple_segment_array_x_weight;
    typedef ::grapenlp::array<::grapenlp::simple_segment_array_x_weight<::grapenlp::array<unichar>::const_iterator, unichar, int> > uaui_simple_segment_array_x_weight_array;
}

SWIGINTERN ::grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > const &grapenlp_array_Sl__grapenlp_simple_segment_array_x_weight_Sl__grapenlp_array_Sl_unichar_Sg__const_iterator_Sc_unichar_Sc_int_Sg__Sg__get_elem_at(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *self,grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type i){ return (*self)[i]; }

#include <string>
/*#include <grapenlp/ualxiw_manager.h>*/
#include <grapenlp/ul_manager.h>
namespace grapenlp
{
    typedef u_array::const_iterator ua_input_iterator;
    typedef ul_manager<ua_input_iterator, std::plus<int> > ualxiw_manager;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1byte_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned char *)new_byte_array(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1byte_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  delete_byte_array(arg1);
}


SWIGEXPORT jshort JNICALL Java_com_grapenlp_core_jgrapenlpJNI_byte_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jshort jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)byte_array_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_byte_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jshort jarg3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  byte_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  grapenlp::array< unsigned short >::size_type arg1 ;
  grapenlp::array< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (grapenlp::array< unsigned short >::size_type)jarg1; 
  result = (grapenlp::array< unichar > *)new grapenlp::array< unichar >(arg1);
  *(grapenlp::array< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1u_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = ((grapenlp::array< unichar > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1size_1in_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = ((grapenlp::array< unichar > const *)arg1)->size_in_bytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = (bool)((grapenlp::array< unichar > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = (grapenlp::array< unsigned short >::iterator)(arg1)->begin();
  *(grapenlp::array< unsigned short >::iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1const_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = (grapenlp::array< unsigned short >::const_iterator)((grapenlp::array< unichar > const *)arg1)->begin();
  *(grapenlp::array< unsigned short >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1const_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = (grapenlp::array< unsigned short >::const_iterator)((grapenlp::array< unichar > const *)arg1)->end();
  *(grapenlp::array< unsigned short >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1get_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  result = (unsigned char *)((grapenlp::array< unichar > const *)arg1)->get_bytes();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1set_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  (arg1)->set_bytes(arg2);
}


SWIGEXPORT jint JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1array_1get_1elem_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  grapenlp::array< unichar > *arg1 = (grapenlp::array< unichar > *) 0 ;
  grapenlp::array< unsigned short >::size_type arg2 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< unichar > **)&jarg1; 
  arg2 = (grapenlp::array< unsigned short >::size_type)jarg2; 
  result = (unsigned short *) &grapenlp_array_Sl_unichar_Sg__get_elem_at((grapenlp::array< unsigned short > const *)arg1,arg2);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1trie_1string_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::trie_string< unichar > *arg1 = (grapenlp::trie_string< unichar > *) 0 ;
  grapenlp::trie< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::trie_string< unichar > **)&jarg1; 
  result = ((grapenlp::trie_string< unichar > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1trie_1string_1to_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  grapenlp::trie_string< unichar > *arg1 = (grapenlp::trie_string< unichar > *) 0 ;
  grapenlp::array< unsigned short > *arg2 = 0 ;
  grapenlp::array< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::trie_string< unichar > **)&jarg1; 
  arg2 = *(grapenlp::array< unsigned short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "grapenlp::array< unsigned short > & reference is null");
    return 0;
  } 
  result = (grapenlp::array< unsigned short > *) &(arg1)->to_array(*arg2);
  *(grapenlp::array< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1trie_1string_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  grapenlp::trie_string< unichar > *arg1 = (grapenlp::trie_string< unichar > *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::trie_string< unichar > **)&jarg1; 
  result = (unsigned short)((grapenlp::trie_string< unichar > const *)arg1)->back();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1trie(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::trie< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::trie< unichar > *)new grapenlp::trie< unichar >();
  *(grapenlp::trie< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1u_1trie(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::trie< unichar > *arg1 = (grapenlp::trie< unichar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::trie< unichar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  grapenlp::out_bound< unsigned short >::name_string_const_ref arg2 = (grapenlp::out_bound< unsigned short >::name_string_const_ref) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  arg2 = *(grapenlp::out_bound< unsigned short >::name_string_const_ref *)&jarg2; 
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  grapenlp::out_bound< unsigned short >::name_string_const_ref result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  result = (grapenlp::out_bound< unsigned short >::name_string_const_ref) ((arg1)->name);
  *(grapenlp::out_bound< unsigned short >::name_string_const_ref *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  result = (bool) ((arg1)->left);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  grapenlp::out_bound< unichar > *arg1 = (grapenlp::out_bound< unichar > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1; 
  result = (bool) ((arg1)->right);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1out_1bound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  grapenlp::out_bound< unsigned short >::name_string_const_ref arg1 = (grapenlp::out_bound< unsigned short >::name_string_const_ref) 0 ;
  bool arg2 ;
  bool arg3 ;
  grapenlp::out_bound< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unsigned short >::name_string_const_ref *)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (grapenlp::out_bound< unichar > *)new grapenlp::out_bound< unichar >(arg1,arg2,arg3);
  *(grapenlp::out_bound< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1out_1bound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::out_bound< unichar > *arg1 = 0 ;
  grapenlp::out_bound< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::out_bound< unichar > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "grapenlp::out_bound< unichar > const & reference is null");
    return 0;
  } 
  result = (grapenlp::out_bound< unichar > *)new grapenlp::out_bound< unichar >((grapenlp::out_bound< unichar > const &)*arg1);
  *(grapenlp::out_bound< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1out_1bound_1const_1ref_1triplet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::out_bound_const_ref_triplet< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::out_bound_const_ref_triplet< unichar > *)new grapenlp::out_bound_const_ref_triplet< unichar >();
  *(grapenlp::out_bound_const_ref_triplet< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1const_1ref_1triplet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  grapenlp::out_bound_const_ref_triplet< unichar > *arg1 = (grapenlp::out_bound_const_ref_triplet< unichar > *) 0 ;
  grapenlp::out_bound_const_ref_triplet< unsigned short >::name_string_const_ref arg2 = (grapenlp::out_bound_const_ref_triplet< unsigned short >::name_string_const_ref) 0 ;
  bool arg3 ;
  bool arg4 ;
  grapenlp::out_bound< unsigned short >::const_ref result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::out_bound_const_ref_triplet< unichar > **)&jarg1; 
  arg2 = *(grapenlp::out_bound_const_ref_triplet< unsigned short >::name_string_const_ref *)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (grapenlp::out_bound< unsigned short >::const_ref)(arg1)->get(arg2,arg3,arg4);
  *(grapenlp::out_bound< unsigned short >::const_ref *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1u_1out_1bound_1const_1ref_1triplet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::out_bound_const_ref_triplet< unichar > *arg1 = (grapenlp::out_bound_const_ref_triplet< unichar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::out_bound_const_ref_triplet< unichar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_base_1u_1out_1bound_1name_1string_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *arg1 = (grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *) 0 ;
  grapenlp::out_bound_const_ref_triplet< unichar > *arg2 = (grapenlp::out_bound_const_ref_triplet< unichar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jarg1; 
  arg2 = *(grapenlp::out_bound_const_ref_triplet< unichar > **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_base_1u_1out_1bound_1name_1string_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *arg1 = (grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *) 0 ;
  grapenlp::out_bound_const_ref_triplet< unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jarg1; 
  result = (grapenlp::out_bound_const_ref_triplet< unichar > *) ((arg1)->data);
  *(grapenlp::out_bound_const_ref_triplet< unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1base_1u_1out_1bound_1trie(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *)new grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * >();
  *(grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1base_1u_1out_1bound_1trie(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *arg1 = (grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1out_1bound_1name_1string(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *)new grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > >();
  *(grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1u_1out_1bound_1name_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *arg1 = (grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1u_1out_1bound_1trie(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *)new grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > >();
  *(grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1u_1out_1bound_1trie(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *arg1 = (grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref arg2 = (grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  arg2 = *(grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref *)&jarg2; 
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  result = (grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref) ((arg1)->name);
  *(grapenlp::simple_segment< unsigned short const *,unsigned short >::name_string_const_ref *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1begin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1begin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  result =  ((arg1)->begin);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  result =  ((arg1)->end);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1uau_1simple_1segment(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::simple_segment< unsigned short const *,unichar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::simple_segment< unsigned short const *,unichar > *)new grapenlp::simple_segment< unsigned short const *,unichar >();
  *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1uau_1simple_1segment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::simple_segment< unsigned short const *,unichar > *arg1 = (grapenlp::simple_segment< unsigned short const *,unichar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::simple_segment< unsigned short const *,unichar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1uau_1simple_1segment_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type arg1 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type)jarg1; 
  result = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *)new grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > >(arg1);
  *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1uau_1simple_1segment_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = ((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1size_1in_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = ((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->size_in_bytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = (bool)((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::iterator)(arg1)->begin();
  *(grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1const_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator)((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->begin();
  *(grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1const_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator)((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->end();
  *(grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1get_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  result = (unsigned char *)((grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > const *)arg1)->get_bytes();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1set_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  (arg1)->set_bytes(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uau_1simple_1segment_1array_1get_1elem_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type arg2 ;
  ::grapenlp::simple_segment< unsigned short const *,unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment< ::grapenlp::array< unichar >::const_iterator,unichar > > **)&jarg1; 
  arg2 = (grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type)jarg2; 
  result = (::grapenlp::simple_segment< unsigned short const *,unsigned short > *) &grapenlp_array_Sl__grapenlp_simple_segment_Sl__grapenlp_array_Sl_unichar_Sg__const_iterator_Sc_unichar_Sg__Sg__get_elem_at((grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > > const *)arg1,arg2);
  *(::grapenlp::simple_segment< unsigned short const *,unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1ssa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *arg1 = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *) 0 ;
  ::grapenlp::uau_simple_segment_array *arg2 = (::grapenlp::uau_simple_segment_array *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jarg1; 
  arg2 = *(::grapenlp::uau_simple_segment_array **)&jarg2; 
  if (arg1) (arg1)->ssa = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1ssa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *arg1 = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *) 0 ;
  ::grapenlp::uau_simple_segment_array *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jarg1; 
  result = (::grapenlp::uau_simple_segment_array *)& ((arg1)->ssa);
  *(::grapenlp::uau_simple_segment_array **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *arg1 = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jint JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *arg1 = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jarg1; 
  result = (int) ((arg1)->w);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1uaui_1simple_1segment_1array_1x_1weight(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *)new grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int >();
  *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1uaui_1simple_1segment_1array_1x_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *arg1 = (grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::simple_segment_array_x_weight< unsigned short const *,unichar,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1uaui_1simple_1segment_1array_1x_1weight_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type arg1 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type)jarg1; 
  result = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *)new grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > >(arg1);
  *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1uaui_1simple_1segment_1array_1x_1weight_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = ((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1size_1in_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = ((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->size_in_bytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = (bool)((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::iterator)(arg1)->begin();
  *(grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1const_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator)((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->begin();
  *(grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1const_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = (grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator)((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->end();
  *(grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1get_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  result = (unsigned char *)((grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > const *)arg1)->get_bytes();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1set_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  (arg1)->set_bytes(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_uaui_1simple_1segment_1array_1x_1weight_1array_1get_1elem_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *arg1 = (grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > *) 0 ;
  grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type arg2 ;
  ::grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::array< ::grapenlp::simple_segment_array_x_weight< ::grapenlp::array< unichar >::const_iterator,unichar,int > > **)&jarg1; 
  arg2 = (grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type)jarg2; 
  result = (::grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > *) &grapenlp_array_Sl__grapenlp_simple_segment_array_x_weight_Sl__grapenlp_array_Sl_unichar_Sg__const_iterator_Sc_unichar_Sc_int_Sg__Sg__get_elem_at((grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > > const *)arg1,arg2);
  *(::grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_new_1ualxiw_1manager(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  grapenlp::rtno_type arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (grapenlp::rtno_type)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *)new grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > >(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_delete_1ualxiw_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *arg1 = (grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_ualxiw_1manager_1get_1simplified_1weighted_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *arg1 = (grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *) 0 ;
  ::grapenlp::uaui_simple_segment_array_x_weight_array *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > **)&jarg1; 
  result = (::grapenlp::uaui_simple_segment_array_x_weight_array *) &(arg1)->get_simplified_weighted_output();
  *(::grapenlp::uaui_simple_segment_array_x_weight_array **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grapenlp_core_jgrapenlpJNI_ualxiw_1manager_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jint jarg7, jint jarg8) {
  grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *arg1 = (grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > *) 0 ;
  grapenlp::ua_input_iterator arg2 = (grapenlp::ua_input_iterator) 0 ;
  grapenlp::ua_input_iterator arg3 = (grapenlp::ua_input_iterator) 0 ;
  grapenlp::rtno_parser_type arg4 ;
  bool arg5 ;
  bool arg6 ;
  grapenlp::assoc_container_impl_choice arg7 ;
  grapenlp::assoc_container_impl_choice arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(grapenlp::ul_manager< grapenlp::ua_input_iterator,std::plus< int > > **)&jarg1; 
  arg2 = *(grapenlp::ua_input_iterator *)&jarg2; 
  arg3 = *(grapenlp::ua_input_iterator *)&jarg3; 
  arg4 = (grapenlp::rtno_parser_type)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (grapenlp::assoc_container_impl_choice)jarg7; 
  arg8 = (grapenlp::assoc_container_impl_choice)jarg8; 
  (arg1)->process(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_base_1u_1out_1bound_1name_1string_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(grapenlp::trie_string< unichar > **)&baseptr = *(grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_base_1u_1out_1bound_1trie_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(grapenlp::trie< unichar > **)&baseptr = *(grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1name_1string_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(grapenlp::trie_with_data_string< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&baseptr = *(grapenlp::trie_with_ptr_data_string< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grapenlp_core_jgrapenlpJNI_u_1out_1bound_1trie_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(grapenlp::trie_with_data< unichar,grapenlp::out_bound_const_ref_triplet< unichar > * > **)&baseptr = *(grapenlp::trie_with_ptr_data< unichar,::grapenlp::out_bound_const_ref_triplet< unichar > > **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

